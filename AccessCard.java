import java.time.LocalDateTime;
import java.util.*;
import java.util.List;  // ‡πÉ‡∏ä‡πâ java.util.List ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
import java.util.ArrayList;


//====== Base Class ======
abstract class AccessCard {
    private String cardID;
    private String pin;
    private List<String> accessLevels;
    private List<String> facadeIDs;
    private LocalDateTime expiryDate;
    private String accessLevelCategory;



    public AccessCard(String cardID, String pin, LocalDateTime expiryDate) {
        this.cardID = cardID;
        this.pin = pin;
        this.expiryDate = expiryDate;
        this.accessLevels = new ArrayList<>();
        this.facadeIDs = new ArrayList<>();
    }

    public void setAccessLevels(List<String> accessLevels) {
        this.accessLevels = accessLevels;
    }

    public boolean validatePIN(String inputPin) {
        return this.pin.equals(inputPin);
    }

    public abstract void encryptCardData();

    public String getCardID() {
        return cardID;
    }

    public String getPin() {
        return this.pin;
    }

    public void setPin(String newPin) {
        this.pin = newPin;
    }

    public void setExpiryDate(LocalDateTime newExpiryDate) {
        this.expiryDate = newExpiryDate;
    }


    public LocalDateTime getExpiryDate() {
        return this.expiryDate;
    }

    public List<String> getAccessLevels() {
        return accessLevels;
    }

    public String getAccessLevelCategory() {
        return this.accessLevelCategory;
    }

    public void clearAccessLevels() {
        this.accessLevels.clear();
    }

    public void addAccessLevel(String level) {
        if (!this.accessLevels.contains(level)) { // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ã‡πâ‡∏≥
            this.accessLevels.add(level);
        }
    }

    public void removeAccessLevel(String level) {
        if (accessLevels != null && accessLevels.contains(level)) {
            accessLevels.remove(level);  // ‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
        }
    }

    public void addFacadeID(String facadeID) {
        if (!facadeIDs.contains(facadeID)) {
            facadeIDs.add(facadeID);
        }
    }

    public List<String> getFacadeIDs() {
        return facadeIDs;
    }

    public boolean hasAccess(String level, String inputPin, String facadeID) {
        if (this instanceof TimeBasedAccessCard) {
            // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
            encryptCardData();  // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
            System.out.println("Encrypted Card Data: " + ((TimeBasedAccessCard) this).getEncryptedData());
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PIN ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏•‡∏∞ Facade ID
        return validatePIN(inputPin) && accessLevels.contains(level) && facadeIDs.contains(facadeID) && LocalDateTime.now().isBefore(expiryDate);
    }




    @Override
    public String toString() {
        return "CardID: " + cardID + ", Levels: " + accessLevels.toString() + ", Expiry: " + expiryDate;
    }
}

//====== Decorator for Temporary Permission ======

class TemporaryPermissionDecorator extends AccessCard {
    private AccessCard decoratedCard;
    private String tempPermission;
    private LocalDateTime expiry;

    public TemporaryPermissionDecorator(AccessCard card, String tempPermission, LocalDateTime expiry) {
        super(card.getCardID(), "****", card.getExpiryDate()); // ‡πÉ‡∏ä‡πâ "****" ‡πÅ‡∏ó‡∏ô PIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏∏‡∏î
        this.decoratedCard = card;
        this.tempPermission = tempPermission;
        this.expiry = expiry;
    }



    @Override
    public boolean hasAccess(String level, String inputPin, String facadeID) {
        if (LocalDateTime.now().isBefore(expiry) && level.equals(tempPermission)) {
            return true;
        }
        return decoratedCard.hasAccess(level, inputPin, facadeID);
    }


    @Override
    public void encryptCardData() {
        decoratedCard.encryptCardData();
    }
}

//====== Subclass for Time-Based Encrypted Access Cards ======
class TimeBasedAccessCard extends AccessCard {
    private String encryptedData;

    public TimeBasedAccessCard(String cardID, String pin, LocalDateTime expiryDate) {
        super(cardID, pin, expiryDate);
    }

    @Override
    public void encryptCardData() {
        // ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
        this.encryptedData = "Encrypted:" + getCardID() + "@" + getExpiryDate().toString();
    }

    public String getEncryptedData() {
        return encryptedData;
    }
}


//====== Strategy Pattern for Authentication ======‚ùóÔ∏è‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£
interface AccessVerificationStrategy {
    boolean verify(AccessCard card, String level, String inputPin);
}

// Concrete Strategy 1: Basic Authentication (‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£)
class BasicAuthentication implements AccessVerificationStrategy {
    @Override
    public boolean verify(AccessCard card, String level, String inputPin) {
        return card.hasAccess(level, inputPin, "DEFAULT_FACADE_ID");
    }
}




//====== Access Control System ======
class AccessControlSystem {
    private Map<String, AccessCard> registeredCards;
    private List<String> auditLogs;
    private List<AccessCard> cards;
    private AuditLog auditLog;
    private Map<String, List<String>> changesLogMap;


    public AccessControlSystem() {
        registeredCards = new HashMap<>();
        auditLogs = new ArrayList<>();
        changesLogMap = new HashMap<>();
        this.cards = new ArrayList<>();
        this.auditLog = new AuditLog();
    }

    public void registerCard(AccessCard card) {
        registeredCards.put(card.getCardID(), card);
        logEvent("Card Registered: " + card.getCardID());
    }

    public AccessCard getCard(String cardID) {
        return registeredCards.get(cardID);
    }

    public Collection<AccessCard> getAllCards() {
        return registeredCards.values();
    }

    public List<String> getCardChangesLog(String cardID) {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å changesLogMap ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô ArrayList ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
        List<String> logs = changesLogMap.getOrDefault(cardID, new ArrayList<>());

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Log ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (logs.isEmpty()) {
            System.out.println("DEBUG: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Card ID: " + cardID);
        } else {
            System.out.println("DEBUG: Log ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Card ID " + cardID + " -> " + logs);
        }

        return logs;
    }

    public void updateCardInSystem(String cardID, AccessCard card) {
        registeredCards.put(cardID, card);
        System.out.println("Updated card in system: " + cardID);
        System.out.println("Current Access Levels: " + registeredCards.get(cardID).getAccessLevels()); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    }



    public boolean modifyCard(String cardID, String action, String level, String floor, String room, String newPin, LocalDateTime newExpiryDate, String adminID) {
        AccessCard card = getCard(cardID); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠

        if (card == null) {
            System.out.println("‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î " + cardID);
            return false; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î
        }

        List<String> accessLevels = new ArrayList<>(card.getAccessLevels());  // ‚úÖ ‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        boolean updated = false;

        // üü¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        if ("ADD".equalsIgnoreCase(action)) {
            if (!accessLevels.contains(level)) {
                accessLevels.add(level);  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
                card.setAccessLevels(accessLevels);  // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
                this.updateCardInSystem(cardID, card); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö
                logCardChange(cardID, "ADD", level, adminID);
                logEvent("‚úÖ Added access level '" + level + "' to card: " + cardID);
                updated = true;
            } else {
                System.out.println("‚ö†Ô∏è Access level already exists.");
            }
        }
        // üî¥ ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        else if ("REVOKE".equalsIgnoreCase(action)) {
            boolean removed = accessLevels.removeIf(l -> l.trim().equalsIgnoreCase(level.trim())); // ‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå

            System.out.println("üìå ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö: " + accessLevels);

            if (removed) {
                card.setAccessLevels(accessLevels); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
                this.updateCardInSystem(cardID, card); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö
                logCardChange(cardID, "REVOKE", level, adminID);
                logEvent("‚úÖ Removed access level '" + level + "' from card: " + cardID);
                updated = true;
            } else {
                System.out.println("‚ö†Ô∏è ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß");
                // ‡∏´‡∏≤‡∏Å‡∏•‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            }
        }


        // üü° ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        else if ("MODIFY".equalsIgnoreCase(action)) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ level ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô accessLevels ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (accessLevels.contains(level)) {
                accessLevels.remove(level);  // ‡∏•‡∏ö level ‡πÄ‡∏î‡∏¥‡∏°
                String newLevel = floor + " - " + room;  // ‡∏™‡∏£‡πâ‡∏≤‡∏á level ‡πÉ‡∏´‡∏°‡πà
                accessLevels.add(newLevel);  // ‡πÄ‡∏û‡∏¥‡πà‡∏° level ‡πÉ‡∏´‡∏°‡πà
                card.setAccessLevels(accessLevels);  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πå‡∏î
                this.updateCardInSystem(cardID, card); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö

                logCardChange(cardID, "MODIFY", level + " -> " + newLevel, adminID);
                logEvent("üîÑ Access level changed for card: " + cardID + " from " + level + " to " + newLevel);
                updated = true;
            } else {
                System.out.println("‚ùå Access level not found to modify.");
                return false;
            }
        }

        // üîë ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï PIN
        if (newPin != null && !newPin.equals(card.getPin())) {
            card.setPin(newPin);
            logCardChange(cardID, "CHANGE_PIN", "New PIN set", adminID);
            logEvent("üîë PIN changed for card: " + cardID);
            updated = true;
        }

        // üìÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        if (newExpiryDate != null && !newExpiryDate.equals(card.getExpiryDate())) {
            card.setExpiryDate(newExpiryDate);
            logCardChange(cardID, "RENEW", "Expiry updated to " + newExpiryDate, adminID);
            logEvent("üìÖ Card renewed: " + cardID + ", new expiry: " + newExpiryDate);
            updated = true;
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (updated) {
            System.out.println("‚úÖ Card updated successfully.");
            return true;
        } else {
            System.out.println("‚ö†Ô∏è No changes were made.");
            return false;
        }
    }

    public void changePin(String cardID, String newPin, String adminID) {
        AccessCard card = registeredCards.get(cardID);
        if (card != null) {
            card.setPin(newPin);  // ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï PIN ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î
            logCardChange(cardID, "CHANGE_PIN", "New PIN set", adminID);
            logEvent("PIN changed for card: " + cardID);
        }
    }

    public void renewCard(String cardID, LocalDateTime newExpiryDate, String adminID) {
        AccessCard card = registeredCards.get(cardID);
        if (card != null) {
            card.setExpiryDate(newExpiryDate);  // ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
            logCardChange(cardID, "RENEW", "Expiry extended to " + newExpiryDate, adminID);
            logEvent("Card renewed: " + cardID + ", new expiry: " + newExpiryDate);
        }
    }



    public void checkCard(String cardID) {
        AccessCard card = registeredCards.get(cardID);
        if (card != null) {
            System.out.println("[INFO] " + card.toString());
        } else {
            System.out.println("[ERROR] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ï‡∏£ ID: " + cardID);
        }
    }

    public boolean removeCard(String cardID) {
        AccessCard card = registeredCards.remove(cardID);
        if (card != null) {
            logEvent("Card Removed: " + cardID);
            return true;
        } else {
            logEvent("Failed to remove card: " + cardID);
            return false;
        }
    }



    public void logEvent(String event) {
        auditLogs.add(LocalDateTime.now() + " - " + event);  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡∏á‡πÉ‡∏ô auditLogs
        System.out.println("Event Logged: " + event);  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô console
    }


    public void displayAuditLogs() {
        for (String log : auditLogs) {
            System.out.println(log);
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î
    public void displayCardChanges(String cardID) {
        List<String> changes = getCardChangesLog(cardID);
        if (changes.isEmpty()) {
            System.out.println("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ");
        } else {
            System.out.println("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î " + cardID + ":");
            for (String change : changes) {
                System.out.println(change);
            }
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
    public void logCardChange(String cardID, String action, String levelOrRoom, String adminID) {
        // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô log file ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
        String logMessage = "Card ID: " + cardID + ", Action: " + action + ", Details: " + levelOrRoom + ", Admin ID: " + adminID;

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô changesLogMap
        changesLogMap.computeIfAbsent(cardID, k -> new ArrayList<>()).add(logMessage);

        // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏•‡∏á‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
        System.out.println("Log: " + logMessage);
    }

    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    public void logAuditTrail(String action, String cardID, String details, String adminID) {
        String logEntry = "Action: " + action + ", Card ID: " + cardID + ", Details: " + details + ", Admin ID: " + adminID + ", Time: " + LocalDateTime.now();
        logEvent(logEntry);  // ‡πÉ‡∏ä‡πâ logEvent ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô
    }



}


