import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;
import java.time.LocalDateTime;


public class ManagerPanel {
    private JFrame frame;
    private AccessControlSystem system;
    private JTable cardTable;
    private DefaultTableModel tableModel;
    private AccessCard card; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Manager Panel

    public ManagerPanel(AccessControlSystem system, AccessCard card) {
        // ‡∏Ç‡∏≠‡∏Å‡∏£‡∏≠‡∏Å PIN ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        String inputPin = JOptionPane.showInputDialog(null, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ PIN:");

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á "ManagerPanel"
        boolean isManager = card.getAccessLevels().stream()
                .anyMatch(level -> level.equalsIgnoreCase("Manager"));

        if (!isManager || !card.validatePIN(inputPin)) {
            JOptionPane.showMessageDialog(null, "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Manager Panel!", "Access Denied", JOptionPane.ERROR_MESSAGE);
            return;
        }


        this.system = system;
        frame = new JFrame("Manager Panel");
        frame.setSize(600, 500);
        frame.setLayout(new BorderLayout());

        showManagerOptions();
        frame.setVisible(true);
    }


    // üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£
    private void updateCardList() {
        if (this.tableModel == null) {
            System.err.println("[ERROR] Table model ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤");
            return;
        }
        tableModel.setRowCount(0);  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        for (AccessCard card : system.getAllCards()) {
            for (String level : card.getAccessLevels()) { // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ accessLevels ‡πÄ‡∏õ‡πá‡∏ô String
                tableModel.addRow(new Object[]{
                        card.getCardID(),  // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Å‡∏≤‡∏£‡πå‡∏î
                        level,  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á (level)
                        card.getAccessLevelCategory()
                });
            }
        }
    }



    // üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ï‡∏£
    private void addAccessLevel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        JTextField cardIDField = new JTextField();
        panel.add(new JLabel("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Card ID:"));
        panel.add(cardIDField);

        JTextField floorField = new JTextField();
        panel.add(new JLabel("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô (Floor):"));
        panel.add(floorField);

        JTextField roomField = new JTextField();
        panel.add(new JLabel("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á (Room):"));
        panel.add(roomField);

        int result = JOptionPane.showConfirmDialog(frame, panel, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            String cardID = cardIDField.getText().trim();
            String floor = floorField.getText().trim();
            String room = roomField.getText().trim();

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
            if (cardID.isEmpty() || floor.isEmpty() || room.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            AccessCard card = system.getCard(cardID);  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö

            if (card == null) {  // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÑ‡∏°‡πà‡∏û‡∏ö
                JOptionPane.showMessageDialog(frame, "Card ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String level = floor + ":" + room;  // ‡∏™‡∏£‡πâ‡∏≤‡∏á level ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°

            List<String> accessLevels = card.getAccessLevels();

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (accessLevels.contains(level)) {
                JOptionPane.showMessageDialog(frame, "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String adminID = "ADMIN001"; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Admin ID ‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

            String newPin = card.getPin();
            LocalDateTime newExpiryDate = card.getExpiryDate();

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ modifyCard() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡∏°‡πà
            boolean updated = system.modifyCard(cardID, "ADD", level, floor, room, newPin, newExpiryDate, adminID);

            if (updated) {
                JOptionPane.showMessageDialog(frame, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
                updateCardList();  // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô UI
            } else {
                JOptionPane.showMessageDialog(frame, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏î‡πâ", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }


    //‡πÄ‡∏û‡∏¥‡∏Å‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‚ùå
    private void revokeAccessLevel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        JTextField cardIDField = new JTextField();
        panel.add(new JLabel("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Card ID:"));
        panel.add(cardIDField);

        JTextField floorField = new JTextField();
        panel.add(new JLabel("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô (Floor):"));
        panel.add(floorField);

        JTextField roomField = new JTextField();
        panel.add(new JLabel("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á (Room):"));
        panel.add(roomField);

        int result = JOptionPane.showConfirmDialog(frame, panel, "‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            String cardID = cardIDField.getText().trim();
            String floor = floorField.getText().trim();
            String room = roomField.getText().trim();

            if (cardID.isEmpty() || floor.isEmpty() || room.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
            AccessCard card = system.getCard(cardID);
            if (card == null) {
                JOptionPane.showMessageDialog(frame, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡∏ô‡∏µ‡πâ", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
            String level = floor + ":" + room;

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
            System.out.println("Before removal: " + card.getAccessLevels());
            System.out.println("Trying to remove level: " + level);

            // ‡∏î‡∏∂‡∏á Access Levels ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            List<String> accessLevels = card.getAccessLevels();
            System.out.println("Access Levels: " + accessLevels);

            // ‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (Case Insensitive ‡πÅ‡∏•‡∏∞ Trim)
            boolean removed = accessLevels.removeIf(l -> l.trim().equalsIgnoreCase(level.trim()));
            System.out.println("After removal: " + accessLevels);
            System.out.println("Removed: " + removed);

            if (!removed) {
                JOptionPane.showMessageDialog(frame, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Access Levels ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î
            card.setAccessLevels(accessLevels);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
            system.updateCardInSystem(cardID, card);
            system.logCardChange(cardID, "REVOKE", level, "ADMIN001");

            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä UI
            updateCardList();

            // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•
            JOptionPane.showMessageDialog(frame, "‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        }
    }








    private void checkCardInformation() {
        String cardID = JOptionPane.showInputDialog(frame, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡πå‡∏î:");
        if (cardID == null || cardID.trim().isEmpty()) return;

        String inputPin = JOptionPane.showInputDialog(frame, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ PIN:");
        if (inputPin == null || inputPin.trim().isEmpty()) return;

        AccessCard card = system.getCard(cardID);
        if (card != null && card.validatePIN(inputPin)) {
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÇ‡∏î‡∏¢‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô
            String cardInfo = "<html>";
            cardInfo += "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î:\n";
            cardInfo += "Card ID: " + card.getCardID() + "<br>";
            cardInfo += "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á: " + String.join(", ", card.getAccessLevels()) + "<br>";
            cardInfo += "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: " + card.getExpiryDate() + "<br>";
            cardInfo += "</html>";

            JOptionPane.showMessageDialog(frame, cardInfo, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(frame, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™ PIN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void checkCardChanges() {
        String cardID = JOptionPane.showInputDialog(frame, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡πå‡∏î:");
        if (cardID == null || cardID.trim().isEmpty()) return;

        List<String> changesLog = system.getCardChangesLog(cardID);  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• log ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ

        if (changesLog.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", JOptionPane.INFORMATION_MESSAGE);
        } else {
            StringBuilder logDetails = new StringBuilder();
            logDetails.append("<html><b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á:</b><br>");
            for (String log : changesLog) {
                logDetails.append(log).append("<br>");
            }
            logDetails.append("</html>");

            JOptionPane.showMessageDialog(frame, logDetails.toString(), "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", JOptionPane.INFORMATION_MESSAGE);
        }
    }






    private void modifyAccessLevel() {
        // ‡∏Ç‡∏≠ Card ID ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        String cardID = JOptionPane.showInputDialog(frame, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Card ID:");
        if (cardID == null || cardID.trim().isEmpty()) return;

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πå‡∏î
        AccessCard card = system.getCard(cardID);
        if (card == null) {
            JOptionPane.showMessageDialog(frame, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // ‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™ PIN
        String inputPin = JOptionPane.showInputDialog(frame, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ PIN:");
        if (inputPin == null || inputPin.trim().isEmpty() || !card.validatePIN(inputPin)) {
            JOptionPane.showMessageDialog(frame, "‡∏£‡∏´‡∏±‡∏™ PIN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // GUI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        panel.add(new JLabel("‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: " + String.join(", ", card.getAccessLevels())));

        // ‡πÉ‡∏ä‡πâ JComboBox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (Low, Medium, High)
        JComboBox<String> levelDropdown = new JComboBox<>(new String[]{"Low Floor", "Medium Floor", "High Floor"});
        panel.add(new JLabel("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡∏°‡πà:"));
        panel.add(levelDropdown);

        JTextField floorField = new JTextField();
        panel.add(new JLabel("‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà:"));
        panel.add(floorField);

        JTextField roomField = new JTextField();
        panel.add(new JLabel("‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà:"));
        panel.add(roomField);

        int result = JOptionPane.showConfirmDialog(frame, panel, "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            String level = (String) levelDropdown.getSelectedItem();
            String floor = floorField.getText().trim();
            String room = roomField.getText().trim();

            // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• level, floor, room ‡πÄ‡∏õ‡πá‡∏ô newLevel ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô accessLevels
            String newLevel = floor + " - " + room; // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà

            // ‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            List<String> accessLevels = card.getAccessLevels();
            accessLevels.clear();  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô accessLevels

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
            accessLevels.add(newLevel);   // ‡πÄ‡∏û‡∏¥‡πà‡∏° level ‡πÉ‡∏´‡∏°‡πà
            card.setAccessLevels(accessLevels);  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πå‡∏î

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
            this.updateCardInSystem(cardID, card); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô log
            logCardChange(cardID, "MODIFY", "Previous level removed, New level -> " + newLevel, "ADMIN001");
            logEvent("üîÑ Access level changed for card: " + cardID + " to " + newLevel);

            JOptionPane.showMessageDialog(frame, "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
            updateCardList();  // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô UI
        }
    }






    private void showChangeLogs(String cardID) {
        List<String> logs = system.getCardChangesLog(cardID);
        if (logs == null || logs.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "No change logs found for this card.", "Change Logs", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        StringBuilder logText = new StringBuilder();
        for (String log : logs) {
            logText.append(log).append("\n");
        }
        JOptionPane.showMessageDialog(frame, logText.toString(), "Change Logs", JOptionPane.INFORMATION_MESSAGE);
    }



    private void showManagerOptions() {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á panel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));  // ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ô‡∏ß‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°
        JButton addAccessButton = new JButton("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå");
        JButton revokeAccessButton = new JButton("‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå");
        JButton modifyAccessButton = new JButton("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå");
        JButton checkCardButton = new JButton("‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î");
        JButton checkChangesButton = new JButton("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á");

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô panel
        panel.add(addAccessButton);
        panel.add(revokeAccessButton);
        panel.add(modifyAccessButton);
        panel.add(checkCardButton);
        panel.add(checkChangesButton);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á JScrollPane ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scroll
        JScrollPane scrollPane = new JScrollPane(panel);
        frame.add(scrollPane, BorderLayout.CENTER);  // ‡πÉ‡∏™‡πà panel ‡∏•‡∏á‡πÉ‡∏ô frame

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
        addAccessButton.addActionListener(e -> addAccessLevel());  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        revokeAccessButton.addActionListener(e -> revokeAccessLevel());
        modifyAccessButton.addActionListener(e -> modifyAccessLevel());  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        checkCardButton.addActionListener(e -> checkCardInformation());
        checkChangesButton.addActionListener(e -> checkCardChanges()); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î
    }
}



